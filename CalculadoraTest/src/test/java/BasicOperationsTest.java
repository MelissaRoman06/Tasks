// Generated by Selenium IDE
import io.github.bonigarcia.wdm.ChromeDriverManager;
import org.junit.*;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;

public class BasicOperationsTest {
  private WebDriver driver;
  private OperatorSimbol operatorSimbol;

  @Before
  public void setUp() {
    ChromeDriverManager.getInstance().version("76.0.3809.126").setup();
    ChromeOptions chromeOptions = new ChromeOptions();
    driver = new ChromeDriver(chromeOptions);
    PageFactory.initElements(driver, this);
    driver.get("https://www.calculadora.org/");
    driver.manage().window().maximize();
    operatorSimbol = new OperatorSimbol();
  }

  @FindBy(name = "expr")
  WebElement resultTextBox;

  @FindBy(linkText = "C")
  WebElement clearKey;

  @FindBy(linkText = "=")
  WebElement equalKey;

  @After
  public void tearDown() {
    driver.quit();
  }

  public String getResult() {
    return resultTextBox.getAttribute("value");
  }

  public void pressKey(String key) {
    driver.findElement(By.linkText(key)).click();
  }

  public void pressKey(Operations operation) {
    pressKey(operatorSimbol.getKeySimbol(operation));
  }

  public void clearResult() {
    clearKey.click();
  }

  public void pressEqual() {
    equalKey.click();
  }

  public void enterNumber(int number) {
    String numberString = Integer.toString(number);
    int numberLength = numberString.length();
    for (int index = 0; index < numberLength; index++) {
      char digitIndex = numberString.charAt(index);
      pressKey(Character.toString(digitIndex));
    }
  }

  public void operation(int number1, int number2, Operations operation) {
    clearResult();
    enterNumber(number1);
    pressKey(operation);
    enterNumber(number2);
    pressEqual();
  }

  @Test
  public void basicOperations_addition() {
    operation(1, 2, Operations.ADD);
    assertThat(getResult(), is("3"));
  }

  @Test
  public void basicOperations_addition_moreThan1Digit() {
    operation(123, 275, Operations.ADD);
    assertThat(getResult(), is("398"));
  }

  @Test
  public void basicOperations_subtraction() {
    operation(2, 1, Operations.SUBTRACT);
    assertThat(getResult(), is("1"));
  }

  @Test
  public void basicOperations_multiplication() {
    operation(2, 3, Operations.MULTIPLICATE);
    assertThat(getResult(), is("6"));
  }

  @Test
  public void basicOperations_division() {
    operation(9, 3, Operations.DIVIDE);
    assertThat(getResult(), is("3"));
  }
}
